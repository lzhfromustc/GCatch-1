package main;
type Any interface {};
type Anyǂ interface {};
type AnyǂDictǂ struct { _type _type_metadata };
type Anyǂ_meta struct {  };
func (this Anyǂ_meta) tryCast(x Any) Any { x_ := x.(Anyǂ);
return x_;
 };
func (this Anyǂ_meta) assertEq(x _type_metadata) Any { x_ := x.(Anyǂ_meta);
return x_;
 };
type Boolǂ interface { Notǂ() Any; Andǂ(aǂ Any) Any; Orǂ(aǂ Any) Any; Condǂ(dict_0 AnyǂDictǂ, brǂ Any) Any; spec_Not() spec_metadata_0; spec_And() spec_metadata_1; spec_Or() spec_metadata_1; spec_Cond() spec_metadata_2 };
type BoolǂDictǂ struct { Notǂ func (receiver Any) Any; Andǂ func (receiver Any, aǂ Any) Any; Orǂ func (receiver Any, aǂ Any) Any; Condǂ func (receiver Any, dict_0 AnyǂDictǂ, brǂ Any) Any; _type _type_metadata };
type Boolǂ_meta struct {  };
func (this Boolǂ_meta) tryCast(x Any) Any { x_ := x.(Boolǂ);
Not_actual := x_.spec_Not()
;
Not_actual._type_0.assertEq(Boolǂ_meta{});
And_actual := x_.spec_And()
;
And_actual._type_0.assertEq(Boolǂ_meta{});
And_actual._type_1.assertEq(Boolǂ_meta{});
Or_actual := x_.spec_Or()
;
Or_actual._type_0.assertEq(Boolǂ_meta{});
Or_actual._type_1.assertEq(Boolǂ_meta{});
Cond_actual := x_.spec_Cond()
;
Cond_actual._type_0.assertEq(Anyǂ_meta{});
Cond_actual._type_1.assertEq(Branchesǂ_meta{param_index_0{}});
Cond_actual._type_2.assertEq(param_index_0{});
return x_;
 };
func (this Boolǂ_meta) assertEq(x _type_metadata) Any { x_ := x.(Boolǂ_meta);
return x_;
 };
type Branchesǂ interface { IfTTǂ() Any; IfFFǂ() Any; spec_IfTT() spec_metadata_0; spec_IfFF() spec_metadata_0 };
type BranchesǂDictǂ struct { IfTTǂ func (receiver Any) Any; IfFFǂ func (receiver Any) Any; _type _type_metadata };
type Branchesǂ_meta struct { _type_0 _type_metadata };
func (this Branchesǂ_meta) tryCast(x Any) Any { x_ := x.(Branchesǂ);
IfTT_actual := x_.spec_IfTT()
;
IfTT_actual._type_0.assertEq(this._type_0);
IfFF_actual := x_.spec_IfFF()
;
IfFF_actual._type_0.assertEq(this._type_0);
return x_;
 };
func (this Branchesǂ_meta) assertEq(x _type_metadata) Any { x_ := x.(Branchesǂ_meta);
this._type_0.assertEq(x_._type_0);
return x_;
 };
type TTǂ struct {};
type TTǂ_meta struct {  };
func (this TTǂ_meta) tryCast(x Any) Any { _ = x.(TTǂ);
return x;
 };
func (this TTǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
type FFǂ struct {};
type FFǂ_meta struct {  };
func (this FFǂ_meta) tryCast(x Any) Any { _ = x.(FFǂ);
return x;
 };
func (this FFǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
func (thisǂ TTǂ) Notǂ() Any { return FFǂ{};
 };
func (thisǂ TTǂ) spec_Not() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (thisǂ FFǂ) Notǂ() Any { return TTǂ{};
 };
func (thisǂ FFǂ) spec_Not() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (thisǂ TTǂ) Condǂ(dict_0 AnyǂDictǂ, brǂ Any) Any { return brǂ.(Branchesǂ).IfTTǂ();
 };
func (thisǂ TTǂ) spec_Cond() spec_metadata_2 { return spec_metadata_2{Anyǂ_meta{}, Branchesǂ_meta{param_index_0{}}, param_index_0{}};
 };
func (thisǂ FFǂ) Condǂ(dict_0 AnyǂDictǂ, brǂ Any) Any { return brǂ.(Branchesǂ).IfFFǂ();
 };
func (thisǂ FFǂ) spec_Cond() spec_metadata_2 { return spec_metadata_2{Anyǂ_meta{}, Branchesǂ_meta{param_index_0{}}, param_index_0{}};
 };
func (thisǂ TTǂ) Andǂ(aǂ Any) Any { return aǂ;
 };
func (thisǂ TTǂ) spec_And() spec_metadata_1 { return spec_metadata_1{Boolǂ_meta{}, Boolǂ_meta{}};
 };
func (thisǂ FFǂ) Andǂ(aǂ Any) Any { return FFǂ{};
 };
func (thisǂ FFǂ) spec_And() spec_metadata_1 { return spec_metadata_1{Boolǂ_meta{}, Boolǂ_meta{}};
 };
func (thisǂ TTǂ) Orǂ(aǂ Any) Any { return TTǂ{};
 };
func (thisǂ TTǂ) spec_Or() spec_metadata_1 { return spec_metadata_1{Boolǂ_meta{}, Boolǂ_meta{}};
 };
func (thisǂ FFǂ) Orǂ(aǂ Any) Any { return aǂ;
 };
func (thisǂ FFǂ) spec_Or() spec_metadata_1 { return spec_metadata_1{Boolǂ_meta{}, Boolǂ_meta{}};
 };
type Intǂ interface { Incǂ() Any; Decǂ() Any; Addǂ(xǂ Any) Any; Gtǂ(xǂ Any) Any; IsNegǂ() Any; IsZeroǂ() Any; Equalǂ(xǂ Any) Any; spec_Inc() spec_metadata_0; spec_Dec() spec_metadata_0; spec_Add() spec_metadata_1; spec_Gt() spec_metadata_1; spec_IsNeg() spec_metadata_0; spec_IsZero() spec_metadata_0; spec_Equal() spec_metadata_1 };
type IntǂDictǂ struct { Incǂ func (receiver Any) Any; Decǂ func (receiver Any) Any; Addǂ func (receiver Any, xǂ Any) Any; Gtǂ func (receiver Any, xǂ Any) Any; IsNegǂ func (receiver Any) Any; IsZeroǂ func (receiver Any) Any; Equalǂ func (receiver Any, xǂ Any) Any; _type _type_metadata };
type Intǂ_meta struct {  };
func (this Intǂ_meta) tryCast(x Any) Any { x_ := x.(Intǂ);
Inc_actual := x_.spec_Inc()
;
Inc_actual._type_0.assertEq(Intǂ_meta{});
Dec_actual := x_.spec_Dec()
;
Dec_actual._type_0.assertEq(Intǂ_meta{});
Add_actual := x_.spec_Add()
;
Add_actual._type_0.assertEq(Intǂ_meta{});
Add_actual._type_1.assertEq(Intǂ_meta{});
Gt_actual := x_.spec_Gt()
;
Gt_actual._type_0.assertEq(Intǂ_meta{});
Gt_actual._type_1.assertEq(Boolǂ_meta{});
IsNeg_actual := x_.spec_IsNeg()
;
IsNeg_actual._type_0.assertEq(Boolǂ_meta{});
IsZero_actual := x_.spec_IsZero()
;
IsZero_actual._type_0.assertEq(Boolǂ_meta{});
Equal_actual := x_.spec_Equal()
;
Equal_actual._type_0.assertEq(Intǂ_meta{});
Equal_actual._type_1.assertEq(Boolǂ_meta{});
return x_;
 };
func (this Intǂ_meta) assertEq(x _type_metadata) Any { x_ := x.(Intǂ_meta);
return x_;
 };
type Zeroǂ struct {};
type Zeroǂ_meta struct {  };
func (this Zeroǂ_meta) tryCast(x Any) Any { _ = x.(Zeroǂ);
return x;
 };
func (this Zeroǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
func (x0ǂ Zeroǂ) Incǂ() Any { return Posǂ{x0ǂ};
 };
func (x0ǂ Zeroǂ) spec_Inc() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (x0ǂ Zeroǂ) Decǂ() Any { return Negǂ{x0ǂ};
 };
func (x0ǂ Zeroǂ) spec_Dec() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (x0ǂ Zeroǂ) Addǂ(xǂ Any) Any { return xǂ;
 };
func (x0ǂ Zeroǂ) spec_Add() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Intǂ_meta{}};
 };
func (x0ǂ Zeroǂ) Gtǂ(xǂ Any) Any { return xǂ.(Intǂ).IsNegǂ();
 };
func (x0ǂ Zeroǂ) spec_Gt() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Boolǂ_meta{}};
 };
func (x0ǂ Zeroǂ) IsNegǂ() Any { return FFǂ{};
 };
func (x0ǂ Zeroǂ) spec_IsNeg() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (x0ǂ Zeroǂ) IsZeroǂ() Any { return TTǂ{};
 };
func (x0ǂ Zeroǂ) spec_IsZero() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (x0ǂ Zeroǂ) Equalǂ(xǂ Any) Any { return xǂ.(Intǂ).IsZeroǂ();
 };
func (x0ǂ Zeroǂ) spec_Equal() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Boolǂ_meta{}};
 };
type Posǂ struct { decǂ Any };
type Posǂ_meta struct {  };
func (this Posǂ_meta) tryCast(x Any) Any { _ = x.(Posǂ);
return x;
 };
func (this Posǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
func (x0ǂ Posǂ) Incǂ() Any { return Posǂ{x0ǂ};
 };
func (x0ǂ Posǂ) spec_Inc() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (x0ǂ Posǂ) Decǂ() Any { return x0ǂ.decǂ;
 };
func (x0ǂ Posǂ) spec_Dec() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (x0ǂ Posǂ) Addǂ(xǂ Any) Any { return x0ǂ.decǂ.(Intǂ).Addǂ(xǂ.(Intǂ).Incǂ());
 };
func (x0ǂ Posǂ) spec_Add() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Intǂ_meta{}};
 };
func (x0ǂ Posǂ) Gtǂ(xǂ Any) Any { return x0ǂ.decǂ.(Intǂ).Gtǂ(xǂ.(Intǂ).Decǂ());
 };
func (x0ǂ Posǂ) spec_Gt() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Boolǂ_meta{}};
 };
func (x0ǂ Posǂ) IsNegǂ() Any { return FFǂ{};
 };
func (x0ǂ Posǂ) spec_IsNeg() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (x0ǂ Posǂ) IsZeroǂ() Any { return FFǂ{};
 };
func (x0ǂ Posǂ) spec_IsZero() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (x0ǂ Posǂ) Equalǂ(xǂ Any) Any { return x0ǂ.decǂ.(Intǂ).Equalǂ(xǂ.(Intǂ).Decǂ());
 };
func (x0ǂ Posǂ) spec_Equal() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Boolǂ_meta{}};
 };
type Negǂ struct { incǂ Any };
type Negǂ_meta struct {  };
func (this Negǂ_meta) tryCast(x Any) Any { _ = x.(Negǂ);
return x;
 };
func (this Negǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
func (x0ǂ Negǂ) Incǂ() Any { return x0ǂ.incǂ;
 };
func (x0ǂ Negǂ) spec_Inc() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (x0ǂ Negǂ) Decǂ() Any { return Negǂ{x0ǂ};
 };
func (x0ǂ Negǂ) spec_Dec() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (x0ǂ Negǂ) Addǂ(xǂ Any) Any { return x0ǂ.incǂ.(Intǂ).Addǂ(xǂ.(Intǂ).Decǂ());
 };
func (x0ǂ Negǂ) spec_Add() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Intǂ_meta{}};
 };
func (x0ǂ Negǂ) Gtǂ(xǂ Any) Any { return x0ǂ.incǂ.(Intǂ).Gtǂ(xǂ.(Intǂ).Incǂ());
 };
func (x0ǂ Negǂ) spec_Gt() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Boolǂ_meta{}};
 };
func (x0ǂ Negǂ) IsNegǂ() Any { return TTǂ{};
 };
func (x0ǂ Negǂ) spec_IsNeg() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (x0ǂ Negǂ) IsZeroǂ() Any { return FFǂ{};
 };
func (x0ǂ Negǂ) spec_IsZero() spec_metadata_0 { return spec_metadata_0{Boolǂ_meta{}};
 };
func (x0ǂ Negǂ) Equalǂ(xǂ Any) Any { return x0ǂ.incǂ.(Intǂ).Equalǂ(xǂ.(Intǂ).Incǂ());
 };
func (x0ǂ Negǂ) spec_Equal() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Boolǂ_meta{}};
 };
type Intsǂ struct {};
type Intsǂ_meta struct {  };
func (this Intsǂ_meta) tryCast(x Any) Any { _ = x.(Intsǂ);
return x;
 };
func (this Intsǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
func (dǂ Intsǂ) _1ǂ() Any { return Posǂ{Zeroǂ{}};
 };
func (dǂ Intsǂ) spec__1() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) _2ǂ() Any { return dǂ._1ǂ().(Intǂ).Addǂ(dǂ._1ǂ());
 };
func (dǂ Intsǂ) spec__2() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) _3ǂ() Any { return dǂ._2ǂ().(Intǂ).Addǂ(dǂ._1ǂ());
 };
func (dǂ Intsǂ) spec__3() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) _4ǂ() Any { return dǂ._3ǂ().(Intǂ).Addǂ(dǂ._1ǂ());
 };
func (dǂ Intsǂ) spec__4() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) _5ǂ() Any { return dǂ._4ǂ().(Intǂ).Addǂ(dǂ._1ǂ());
 };
func (dǂ Intsǂ) spec__5() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) _6ǂ() Any { return dǂ._5ǂ().(Intǂ).Addǂ(dǂ._1ǂ());
 };
func (dǂ Intsǂ) spec__6() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) __1ǂ() Any { return Negǂ{Zeroǂ{}};
 };
func (dǂ Intsǂ) spec___1() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) __2ǂ() Any { return dǂ.__1ǂ().(Intǂ).Addǂ(dǂ.__1ǂ());
 };
func (dǂ Intsǂ) spec___2() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) __3ǂ() Any { return dǂ.__2ǂ().(Intǂ).Addǂ(dǂ.__1ǂ());
 };
func (dǂ Intsǂ) spec___3() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) __4ǂ() Any { return dǂ.__3ǂ().(Intǂ).Addǂ(dǂ.__1ǂ());
 };
func (dǂ Intsǂ) spec___4() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
func (dǂ Intsǂ) __5ǂ() Any { return dǂ.__4ǂ().(Intǂ).Addǂ(dǂ.__1ǂ());
 };
func (dǂ Intsǂ) spec___5() spec_metadata_0 { return spec_metadata_0{Intǂ_meta{}};
 };
type Functionǂ interface { Applyǂ(inǂ Any) Any; spec_Apply() spec_metadata_1 };
type FunctionǂDictǂ struct { Applyǂ func (receiver Any, inǂ Any) Any; _type _type_metadata };
type Functionǂ_meta struct { _type_0 _type_metadata;_type_1 _type_metadata };
func (this Functionǂ_meta) tryCast(x Any) Any { x_ := x.(Functionǂ);
Apply_actual := x_.spec_Apply()
;
Apply_actual._type_0.assertEq(this._type_0);
Apply_actual._type_1.assertEq(this._type_1);
return x_;
 };
func (this Functionǂ_meta) assertEq(x _type_metadata) Any { x_ := x.(Functionǂ_meta);
this._type_0.assertEq(x_._type_0);
this._type_1.assertEq(x_._type_1);
return x_;
 };
type Pipelineǂ interface { Mapǂ(dict_0 AnyǂDictǂ, fǂ Any) Any; spec_Map() spec_metadata_2 };
type PipelineǂDictǂ struct { Mapǂ func (receiver Any, dict_0 AnyǂDictǂ, fǂ Any) Any; _type _type_metadata };
type Pipelineǂ_meta struct { _type_0 _type_metadata };
func (this Pipelineǂ_meta) tryCast(x Any) Any { x_ := x.(Pipelineǂ);
Map_actual := x_.spec_Map()
;
Map_actual._type_0.assertEq(Anyǂ_meta{});
Map_actual._type_1.assertEq(Functionǂ_meta{this._type_0, param_index_0{}});
Map_actual._type_2.assertEq(Pipelineǂ_meta{param_index_0{}});
return x_;
 };
func (this Pipelineǂ_meta) assertEq(x _type_metadata) Any { x_ := x.(Pipelineǂ_meta);
this._type_0.assertEq(x_._type_0);
return x_;
 };
type Streamǂ struct { inǂ Any; dict_0 AnyǂDictǂ };
type Streamǂ_meta struct { _type_0 _type_metadata };
func (this Streamǂ_meta) tryCast(x Any) Any { _ = x.(Streamǂ);
this._type_0.assertEq(x.(Streamǂ).dict_0._type);
return x;
 };
func (this Streamǂ_meta) assertEq(x _type_metadata) Any { this._type_0.assertEq(x.(Streamǂ_meta)._type_0);
return this;
 };
func (thisǂ Streamǂ) Mapǂ(dict_0 AnyǂDictǂ, fǂ Any) Any { outǂ := chan_wrapper{make(chan Any), chan_metadata{__BidirectionalChannel{}, dict_0._type}};
go thisǂ._Mapǂ(dict_0, fǂ, chan_wrapper{outǂ.ch, chan_metadata{__receiveOnlyChannel{}, dict_0._type}});
return Streamǂ{chan_wrapper{outǂ.ch, chan_metadata{__sendOnlyChannel{}, dict_0._type}}, dict_0};
 };
func (thisǂ Streamǂ) spec_Map() spec_metadata_2 { return spec_metadata_2{Anyǂ_meta{}, Functionǂ_meta{thisǂ.dict_0._type, param_index_0{}}, Pipelineǂ_meta{param_index_0{}}};
 };
func (thisǂ Streamǂ) _Mapǂ(dict_0 AnyǂDictǂ, fǂ Any, outǂ Any) Any { val1ǂ := <-thisǂ.inǂ.(chan_wrapper).ch;
outǂ.(chan_wrapper).ch<-fǂ.(Functionǂ).Applyǂ(val1ǂ);
val2ǂ := <-thisǂ.inǂ.(chan_wrapper).ch;
outǂ.(chan_wrapper).ch<-fǂ.(Functionǂ).Applyǂ(val2ǂ);
return val2ǂ;
 };
func (thisǂ Streamǂ) spec__Map() spec_metadata_3 { return spec_metadata_3{Anyǂ_meta{}, Functionǂ_meta{thisǂ.dict_0._type, param_index_0{}}, chan_metadata{__receiveOnlyChannel{}, param_index_0{}}, Anyǂ_meta{}};
 };
type StreamGenǂ struct {};
type StreamGenǂ_meta struct {  };
func (this StreamGenǂ_meta) tryCast(x Any) Any { _ = x.(StreamGenǂ);
return x;
 };
func (this StreamGenǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
type Pairǂ struct { fstǂ Any; sndǂ Any; dict_0 AnyǂDictǂ; dict_1 AnyǂDictǂ };
type Pairǂ_meta struct { _type_0 _type_metadata;_type_1 _type_metadata };
func (this Pairǂ_meta) tryCast(x Any) Any { _ = x.(Pairǂ);
this._type_0.assertEq(x.(Pairǂ).dict_0._type);
this._type_1.assertEq(x.(Pairǂ).dict_1._type);
return x;
 };
func (this Pairǂ_meta) assertEq(x _type_metadata) Any { this._type_0.assertEq(x.(Pairǂ_meta)._type_0);
this._type_1.assertEq(x.(Pairǂ_meta)._type_1);
return this;
 };
func (thisǂ StreamGenǂ) Genǂ(dict_0 AnyǂDictǂ, dict_1 AnyǂDictǂ, fǂ Any, initǂ Any) Any { outǂ := chan_wrapper{make(chan Any), chan_metadata{__BidirectionalChannel{}, dict_1._type}};
go thisǂ._Genǂ(dict_0, dict_1, fǂ, initǂ, chan_wrapper{outǂ.ch, chan_metadata{__receiveOnlyChannel{}, dict_1._type}});
return Streamǂ{chan_wrapper{outǂ.ch, chan_metadata{__sendOnlyChannel{}, dict_1._type}}, dict_1};
 };
func (thisǂ StreamGenǂ) spec_Gen() spec_metadata_4 { return spec_metadata_4{Anyǂ_meta{}, Anyǂ_meta{}, Functionǂ_meta{param_index_0{}, Pairǂ_meta{param_index_1{}, param_index_0{}}}, param_index_0{}, Pipelineǂ_meta{param_index_1{}}};
 };
func (thisǂ StreamGenǂ) _Genǂ(dict_0 AnyǂDictǂ, dict_1 AnyǂDictǂ, fǂ Any, stateǂ Any, outǂ Any) Any { next1ǂ := fǂ.(Functionǂ).Applyǂ(stateǂ);
outǂ.(chan_wrapper).ch<-next1ǂ.(Pairǂ).fstǂ;
next2ǂ := fǂ.(Functionǂ).Applyǂ(next1ǂ.(Pairǂ).sndǂ);
outǂ.(chan_wrapper).ch<-next2ǂ.(Pairǂ).fstǂ;
return next1ǂ;
 };
func (thisǂ StreamGenǂ) spec__Gen() spec_metadata_5 { return spec_metadata_5{Anyǂ_meta{}, Anyǂ_meta{}, Functionǂ_meta{param_index_0{}, Pairǂ_meta{param_index_1{}, param_index_0{}}}, param_index_0{}, chan_metadata{__receiveOnlyChannel{}, param_index_1{}}, Anyǂ_meta{}};
 };
type Addǂ struct { yǂ Any; dict_0 AnyǂDictǂ; dict_1 AnyǂDictǂ };
type Addǂ_meta struct { _type_0 _type_metadata;_type_1 _type_metadata };
func (this Addǂ_meta) tryCast(x Any) Any { _ = x.(Addǂ);
this._type_0.assertEq(x.(Addǂ).dict_0._type);
this._type_1.assertEq(x.(Addǂ).dict_1._type);
return x;
 };
func (this Addǂ_meta) assertEq(x _type_metadata) Any { this._type_0.assertEq(x.(Addǂ_meta)._type_0);
this._type_1.assertEq(x.(Addǂ_meta)._type_1);
return this;
 };
func (thisǂ Addǂ) Applyǂ(inǂ Any) Any { return Pairǂ{inǂ, inǂ.(Intǂ).Addǂ(thisǂ.yǂ), AnyǂDictǂ{Intǂ_meta{}}, AnyǂDictǂ{Intǂ_meta{}}};
 };
func (thisǂ Addǂ) spec_Apply() spec_metadata_1 { return spec_metadata_1{Intǂ_meta{}, Pairǂ_meta{Intǂ_meta{}, Intǂ_meta{}}};
 };
type mainJobǂ struct {};
type mainJobǂ_meta struct {  };
func (this mainJobǂ_meta) tryCast(x Any) Any { _ = x.(mainJobǂ);
return x;
 };
func (this mainJobǂ_meta) assertEq(x _type_metadata) Any { return this;
 };
func (thisǂ mainJobǂ) mymainǂ() Any { fǂ := Addǂ{Intsǂ{}._1ǂ(), AnyǂDictǂ{Intǂ_meta{}}, AnyǂDictǂ{Pairǂ_meta{Intǂ_meta{}, Intǂ_meta{}}}};
pipelineǂ := StreamGenǂ{}.Genǂ(AnyǂDictǂ{Intǂ_meta{}}, AnyǂDictǂ{Intǂ_meta{}}, fǂ, Intsǂ{}._2ǂ()).(Pipelineǂ).Mapǂ(AnyǂDictǂ{Pairǂ_meta{Intǂ_meta{}, Intǂ_meta{}}}, fǂ);
_ = <-Streamǂ_meta{Pairǂ_meta{Intǂ_meta{}, Intǂ_meta{}}}.tryCast(pipelineǂ).(Streamǂ).inǂ.(chan_wrapper).ch;
_ = <-Streamǂ_meta{Pairǂ_meta{Intǂ_meta{}, Intǂ_meta{}}}.tryCast(pipelineǂ).(Streamǂ).inǂ.(chan_wrapper).ch;
return thisǂ;
 };
func (thisǂ mainJobǂ) spec_mymain() spec_metadata_0 { return spec_metadata_0{mainJobǂ_meta{}};
 };
type spec_metadata_3 struct { _type_0 _type_metadata; _type_1 _type_metadata; _type_2 _type_metadata; _type_3 _type_metadata };
type spec_metadata_4 struct { _type_0 _type_metadata; _type_1 _type_metadata; _type_2 _type_metadata; _type_3 _type_metadata; _type_4 _type_metadata };
type spec_metadata_5 struct { _type_0 _type_metadata; _type_1 _type_metadata; _type_2 _type_metadata; _type_3 _type_metadata; _type_4 _type_metadata; _type_5 _type_metadata };
type spec_metadata_0 struct { _type_0 _type_metadata };
type spec_metadata_1 struct { _type_0 _type_metadata; _type_1 _type_metadata };
type spec_metadata_2 struct { _type_0 _type_metadata; _type_1 _type_metadata; _type_2 _type_metadata };
type param_index_0 struct {};
func (this param_index_0) tryCast(x Any) Any {_ = x.(param_index_0); return x;};
func (this param_index_0) assertEq(x _type_metadata) Any {_ = x.(param_index_0); return x;};
type param_index_1 struct {};
func (this param_index_1) tryCast(x Any) Any {_ = x.(param_index_1); return x;};
func (this param_index_1) assertEq(x _type_metadata) Any {_ = x.(param_index_1); return x;};
type _type_metadata interface { tryCast(x Any) Any; assertEq(x _type_metadata) Any };
type __BidirectionalChannel struct {};
func (this __BidirectionalChannel) assertEq(x Any) Any { return x.(__BidirectionalChannel);
 };
type __sendOnlyChannel struct {};
func (this __sendOnlyChannel) assertEq(x Any) Any { return x.(__sendOnlyChannel);
 };
type __receiveOnlyChannel struct {};
func (this __receiveOnlyChannel) assertEq(x Any) Any { return x.(__receiveOnlyChannel);
 };
type chan_wrapper struct { ch chan Any; _type _type_metadata };
type chan_direction interface { assertEq(x Any) Any };
type chan_metadata struct { dir chan_direction; _type _type_metadata };
func (this chan_metadata) tryCast(x Any) Any {
_ = x.(chan_wrapper)._type.assertEq(this);
return x
};
func (this chan_metadata) assertEq(x _type_metadata) Any {
_ = x.(chan_metadata)._type.assertEq(this._type); 
return x.(chan_metadata).dir.assertEq(this.dir)
};
func main() { _ = mainJobǂ{}.mymainǂ() }
