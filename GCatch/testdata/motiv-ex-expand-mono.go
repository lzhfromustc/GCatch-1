package main;
type Anyᐸᐳ interface {};
type Intᐸᐳ interface { Incᐸᐳ() Intᐸᐳ; Inc___Int__() Top; Dec___Int__() Top; Addᐸᐳ(x Intᐸᐳ) Intᐸᐳ; Add___Int___Int__() Top; Gt___Int___Bool__() Top; IsNeg___Bool__() Top; IsZero___Bool__() Top; Equal___Int___Bool__() Top };
type Zeroᐸᐳ struct {};
func (x0 Zeroᐸᐳ) Incᐸᐳ() Intᐸᐳ { return Posᐸᐳ{x0};
 };
func (x0 Zeroᐸᐳ) Inc___Int__() Top { return x0;
 };
func (x0 Zeroᐸᐳ) Dec___Int__() Top { return x0;
 };
func (x0 Zeroᐸᐳ) Addᐸᐳ(x Intᐸᐳ) Intᐸᐳ { return x;
 };
func (x0 Zeroᐸᐳ) Add___Int___Int__() Top { return x0;
 };
func (x0 Zeroᐸᐳ) Gt___Int___Bool__() Top { return x0;
 };
func (x0 Zeroᐸᐳ) IsNeg___Bool__() Top { return x0;
 };
func (x0 Zeroᐸᐳ) IsZero___Bool__() Top { return x0;
 };
func (x0 Zeroᐸᐳ) Equal___Int___Bool__() Top { return x0;
 };
type Posᐸᐳ struct { dec Intᐸᐳ };
func (x0 Posᐸᐳ) Incᐸᐳ() Intᐸᐳ { return Posᐸᐳ{x0};
 };
func (x0 Posᐸᐳ) Inc___Int__() Top { return x0;
 };
func (x0 Posᐸᐳ) Dec___Int__() Top { return x0;
 };
func (x0 Posᐸᐳ) Addᐸᐳ(x Intᐸᐳ) Intᐸᐳ { return x0.dec.Addᐸᐳ(x.Incᐸᐳ());
 };
func (x0 Posᐸᐳ) Add___Int___Int__() Top { return x0;
 };
func (x0 Posᐸᐳ) Gt___Int___Bool__() Top { return x0;
 };
func (x0 Posᐸᐳ) IsNeg___Bool__() Top { return x0;
 };
func (x0 Posᐸᐳ) IsZero___Bool__() Top { return x0;
 };
func (x0 Posᐸᐳ) Equal___Int___Bool__() Top { return x0;
 };
type Intsᐸᐳ struct {};
func (d Intsᐸᐳ) _1ᐸᐳ() Intᐸᐳ { return Posᐸᐳ{Zeroᐸᐳ{}};
 };
func (d Intsᐸᐳ) _1___Int__() Top { return d;
 };
func (d Intsᐸᐳ) _2ᐸᐳ() Intᐸᐳ { return d._1ᐸᐳ().Addᐸᐳ(d._1ᐸᐳ());
 };
func (d Intsᐸᐳ) _2___Int__() Top { return d;
 };
func (d Intsᐸᐳ) _3___Int__() Top { return d;
 };
func (d Intsᐸᐳ) _4___Int__() Top { return d;
 };
func (d Intsᐸᐳ) _5___Int__() Top { return d;
 };
func (d Intsᐸᐳ) _6___Int__() Top { return d;
 };
func (d Intsᐸᐳ) __1___Int__() Top { return d;
 };
func (d Intsᐸᐳ) __2___Int__() Top { return d;
 };
func (d Intsᐸᐳ) __3___Int__() Top { return d;
 };
func (d Intsᐸᐳ) __4___Int__() Top { return d;
 };
func (d Intsᐸᐳ) __5___Int__() Top { return d;
 };
type FunctionᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ interface { Applyᐸᐳ(in Intᐸᐳ) PairᐸIntᐸᐳᐨIntᐸᐳᐳ; Apply___Int___Pair_Int___Int___() Top };
type PipelineᐸIntᐸᐳᐳ interface { MapᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ(f FunctionᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ) PipelineᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ; Map__β1_Any____Function_Int___β1__Pipeline_β1_() Top };
type PipelineᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ interface { Map__β1_Any____Function_Pair_Int___Int____β1__Pipeline_β1_() Top };
type StreamᐸIntᐸᐳᐳ struct { in <-chan Intᐸᐳ };
type StreamᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ struct { in <-chan PairᐸIntᐸᐳᐨIntᐸᐳᐳ };
func (this StreamᐸIntᐸᐳᐳ) MapᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ(f FunctionᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ) PipelineᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ { out := make(chan PairᐸIntᐸᐳᐨIntᐸᐳᐳ);
go this._MapᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ(f, out);
return StreamᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ{out};
 };
func (this StreamᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ) Map__β1_Any____Function_Pair_Int___Int____β1__Pipeline_β1_() Top { return this;
 };
func (this StreamᐸIntᐸᐳᐳ) Map__β1_Any____Function_Int___β1__Pipeline_β1_() Top { return this;
 };
func (this StreamᐸIntᐸᐳᐳ) _MapᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ(f FunctionᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ, out chan<- PairᐸIntᐸᐳᐨIntᐸᐳᐳ) Anyᐸᐳ { val1 := <-this.in;
out<-f.Applyᐸᐳ(val1);
val2 := <-this.in;
out<-f.Applyᐸᐳ(val2);
return val2;
 };
func (this StreamᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ) _Map__β1_Any____Function_Pair_Int___Int____β1__chan_chan_op_β1_Any__() Top { return this;
 };
func (this StreamᐸIntᐸᐳᐳ) _Map__β1_Any____Function_Int___β1__chan_chan_op_β1_Any__() Top { return this;
 };
type StreamGenᐸᐳ struct {};
type PairᐸIntᐸᐳᐨIntᐸᐳᐳ struct { fst Intᐸᐳ; snd Intᐸᐳ };
func (this StreamGenᐸᐳ) GenᐸIntᐸᐳᐨIntᐸᐳᐳ(f FunctionᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ, init Intᐸᐳ) PipelineᐸIntᐸᐳᐳ { out := make(chan Intᐸᐳ);
go this._GenᐸIntᐸᐳᐨIntᐸᐳᐳ(f, init, out);
return StreamᐸIntᐸᐳᐳ{out};
 };
func (this StreamGenᐸᐳ) Gen__β1_Any___β2_Any____Function_β1_Pair_β2_β1___β1_Pipeline_β2_() Top { return this;
 };
func (this StreamGenᐸᐳ) _GenᐸIntᐸᐳᐨIntᐸᐳᐳ(f FunctionᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ, state Intᐸᐳ, out chan<- Intᐸᐳ) Anyᐸᐳ { next1 := f.Applyᐸᐳ(state);
out<-next1.fst;
next2 := f.Applyᐸᐳ(next1.snd);
out<-next2.fst;
return next1;
 };
func (this StreamGenᐸᐳ) _Gen__β1_Any___β2_Any____Function_β1_Pair_β2_β1___β1_chan_chan_op_β2_Any__() Top { return this;
 };
type AddᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ struct { y Intᐸᐳ };
func (this AddᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ) Applyᐸᐳ(in Intᐸᐳ) PairᐸIntᐸᐳᐨIntᐸᐳᐳ { return PairᐸIntᐸᐳᐨIntᐸᐳᐳ{in, in.Addᐸᐳ(this.y)};
 };
func (this AddᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ) Apply___Int___Pair_Int___Int___() Top { return this;
 };
type mainJobᐸᐳ struct {};
func (this mainJobᐸᐳ) mymainᐸᐳ() mainJobᐸᐳ { f := AddᐸIntᐸᐳᐨPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ{Intsᐸᐳ{}._1ᐸᐳ()};
pipeline := StreamGenᐸᐳ{}.GenᐸIntᐸᐳᐨIntᐸᐳᐳ(f, Intsᐸᐳ{}._2ᐸᐳ()).MapᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ(f);
_ = <-pipeline.(StreamᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ).in;
_ = <-pipeline.(StreamᐸPairᐸIntᐸᐳᐨIntᐸᐳᐳᐳ).in;
return this;
 };
func (this mainJobᐸᐳ) mymain___mainJob__() Top { return this;
 };
type Top interface {};
func main() { _ = mainJobᐸᐳ{}.mymainᐸᐳ() }
